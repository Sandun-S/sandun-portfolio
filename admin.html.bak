<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;500&display=swap" rel="stylesheet">
    <style>
        body { padding-top: 0; }
        .admin-login-container { max-width: 500px; margin: 4rem auto; padding: 2rem; background-color: var(--color-background-light); border-radius: 12px; }
        .admin-dashboard { max-width: 1140px; margin: 2rem auto; padding: 0; }
        .admin-header { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid var(--color-border); padding: 1.5rem; background-color: var(--color-card-bg); border-radius: 12px 12px 0 0;}
        .admin-tabs { display: flex; gap: 0.5rem; padding: 0 1.5rem; background-color: var(--color-card-bg); border-bottom: 1px solid var(--color-border); }
        .admin-tabs button { background: none; border: none; padding: 1rem; cursor: pointer; font-size: 1rem; font-weight: 500; color: var(--color-text-secondary); border-bottom: 3px solid transparent; }
        .admin-tabs button.active { color: var(--color-primary); border-bottom-color: var(--color-primary); font-weight: 600; }
        .admin-content { padding: 2rem; background-color: var(--color-background-light); border-radius: 0 0 12px 12px; }
        .admin-grid { display: grid; grid-template-columns: 1fr 2fr; gap: 2rem; }
        .form-container, .list-container { background-color: var(--color-card-bg); padding: 1.5rem; border-radius: 8px; border: 1px solid var(--color-border); }
        .list-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem; border-bottom: 1px solid var(--color-border); }
        .list-item:last-child { border-bottom: none; }
        .list-item-content { flex-grow: 1; margin-right: 1rem; }
        .list-item-actions { display: flex; gap: 0.5rem; flex-shrink: 0; }
        .info-message { padding: 2rem; text-align: center; background-color: var(--color-card-bg); border-radius: 8px; }
    </style>
</head>
<body>
    <div id="admin-root"></div>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, addDoc, doc, updateDoc, deleteDoc, query, orderBy } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        const firebaseConfig = {"apiKey":"AIzaSyBzAT0Chvt7xBDf01TxaAYzfhSznr4qhck","authDomain":"sandunportfolio.firebaseapp.com","projectId":"sandunportfolio","storageBucket":"sandunportfolio.appspot.com","messagingSenderId":"367143211095","appId":"1:367143211095:web:0f0fb1db9b706b60b61312","measurementId":"G-MDMDYC2L3F"};
        
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        const root = document.getElementById('admin-root');
        let testimonials = [], caseStudies = [];
        let activeTab = 'case_studies';
        let currentEditing = null;

        // --- Main Render Function ---
        function render() {
            if (!auth.currentUser) {
                renderLogin();
                return;
            }
            root.innerHTML = `
                <div class="admin-dashboard">
                    <header class="admin-header">
                        <h1>Admin Dashboard</h1>
                        <button id="logout-btn" class="btn btn-primary-outline">Logout</button>
                    </header>
                    <div class="admin-tabs">
                        <button data-tab="case_studies" class="${activeTab === 'case_studies' ? 'active' : ''}">Case Studies</button>
                        <button data-tab="testimonials" class="${activeTab === 'testimonials' ? 'active' : ''}">Testimonials</button>
                    </div>
                    <div class="admin-content" id="admin-content"></div>
                </div>`;
            
            const contentEl = document.getElementById('admin-content');
            if (activeTab === 'testimonials') renderTestimonials(contentEl);
            if (activeTab === 'case_studies') renderCaseStudies(contentEl);
            
            document.getElementById('logout-btn').addEventListener('click', () => signOut(auth));
            document.querySelectorAll('.admin-tabs button').forEach(btn => btn.addEventListener('click', e => {
                activeTab = e.target.dataset.tab;
                currentEditing = null;
                render();
            }));
        }

        // --- Login View ---
        function renderLogin() {
            root.innerHTML = `<div class="admin-login-container"><h2>Admin Login</h2><form id="login-form" class="contact-form"><div class="form-group"><label for="email">Email</label><input type="email" id="email" name="email" required></div><div class="form-group"><label for="password">Password</label><input type="password" id="password" name="password" required></div><button type="submit" class="btn btn-primary">Log In</button><p id="login-error" style="color: red; margin-top: 1rem;"></p></form></div>`;
            document.getElementById('login-form').addEventListener('submit', async e => {
                e.preventDefault();
                try { await signInWithEmailAndPassword(auth, e.target.email.value, e.target.password.value); } catch (error) { document.getElementById('login-error').textContent = 'Failed to log in.'; }
            });
        }

        // --- Testimonials View ---
        function renderTestimonials(container) {
            const listHtml = testimonials.map(t => `<div class="list-item"><div class="list-item-content"><p><strong>${t.author}</strong> - <em>"${t.quote.substring(0, 50)}..."</em></p></div><div class="list-item-actions"><button class="btn btn-secondary" data-edit-id="${t.id}">Edit</button><button class="btn btn-primary-outline" data-delete-id="${t.id}">Delete</button></div></div>`).join('');
            container.innerHTML = `
                <div class="admin-grid">
                    <div class="form-container">
                        <h3 id="form-title">${currentEditing ? 'Edit Testimonial' : 'Add New Testimonial'}</h3>
                        <form id="data-form" class="contact-form">
                            <div class="form-group"><label for="quote">Quote</label><textarea name="quote" rows="4" required>${currentEditing ? currentEditing.quote : ''}</textarea></div>
                            <div class="form-group"><label for="author">Author Name</label><input type="text" name="author" value="${currentEditing ? currentEditing.author : ''}" required></div>
                            <div class="form-group"><label for="title">Author Title/Company</label><input type="text" name="title" value="${currentEditing ? currentEditing.title : ''}" required></div>
                            <button type="submit" class="btn btn-primary">${currentEditing ? 'Update' : 'Add'}</button>
                            ${currentEditing ? '<button type="button" id="cancel-edit" class="btn btn-secondary" style="margin-left:1rem">Cancel</button>' : ''}
                        </form>
                    </div>
                    <div class="list-container">
                        <h3>Existing Testimonials</h3>
                        <div id="data-list">${listHtml || '<p class="info-message">No testimonials yet.</p>'}</div>
                    </div>
                </div>`;
            
            document.getElementById('data-form').addEventListener('submit', async e => {
                e.preventDefault();
                const data = { quote: e.target.quote.value, author: e.target.author.value, title: e.target.title.value };
                if (currentEditing) { await updateDoc(doc(db, 'testimonials', currentEditing.id), data); } else { await addDoc(collection(db, 'testimonials'), data); }
                currentEditing = null; render();
            });

            attachListListeners('testimonials');
        }

        // --- Case Studies View ---
        function renderCaseStudies(container) {
            const listHtml = caseStudies.map(cs => `<div class="list-item"><div class="list-item-content"><p><strong>${cs.title}</strong></p></div><div class="list-item-actions"><button class="btn btn-secondary" data-edit-id="${cs.id}">Edit</button><button class="btn btn-primary-outline" data-delete-id="${cs.id}">Delete</button></div></div>`).join('');
            container.innerHTML = `<div class="admin-grid"><div class="form-container"><h3 id="form-title">${currentEditing ? 'Edit Case Study' : 'Add New Case Study'}</h3><form id="data-form" class="contact-form">
                <div class="form-group"><label>Title</label><input type="text" name="title" required></div>
                <!-- UPGRADED: Category is now a dropdown menu -->
                <div class="form-group"><label>Category</label>
                    <select name="category" required class="form-group input">
                        <option value="IoT">IoT</option>
                        <option value="Firmware">Firmware</option>
                        <option value="PCB Design">PCB Design</option>
                        <option value="Automation">Automation</option>
                        <option value="Machine Learning">Machine Learning</option>
                        <option value="Hardware">Hardware</option>
                        <option value="Real-Time Communication">Real-Time Communication</option>
                    </select>
                </div>
                <div class="form-group"><label>Summary</label><textarea name="summary" rows="3" required></textarea></div>
                <div class="form-group"><label>Image URL</label><input type="url" name="imageUrl" placeholder="https://..."></div>
                <div class="form-group"><label>Challenge</label><textarea name="challenge" rows="4" required></textarea></div>
                <div class="form-group"><label>Solution (Overview)</label><textarea name="solution" rows="6" required></textarea></div>
                <div class="form-group"><label>Outcomes (comma-separated)</label><textarea name="outcomes" rows="3" required></textarea></div>
                <div class="form-group"><label>Technologies (comma-separated)</label><input type="text" name="technologies" required></div>
                <div class="form-group"><label>GitHub URL</label><input type="url" name="githubUrl" placeholder="https://..."></div>
                <button type="submit" class="btn btn-primary">${currentEditing ? 'Update' : 'Add'}</button>
                ${currentEditing ? '<button type="button" id="cancel-edit" class="btn btn-secondary" style="margin-left:1rem">Cancel</button>' : ''}
            </form></div><div class="list-container"><h3>Existing Case Studies</h3><div id="data-list">${listHtml || '<p>No case studies yet.</p>'}</div></div></div>`;
            
            const form = document.getElementById('data-form');
            if (currentEditing) {
                form.title.value = currentEditing.title; form.category.value = currentEditing.category; form.summary.value = currentEditing.summary; form.imageUrl.value = currentEditing.imageUrl || ''; form.challenge.value = currentEditing.challenge; form.solution.value = currentEditing.solution; form.outcomes.value = currentEditing.outcomes.join(', '); form.technologies.value = currentEditing.technologies.join(', '); form.githubUrl.value = currentEditing.githubUrl || '';
            }
            
            form.addEventListener('submit', async e => {
                e.preventDefault();
                const data = { title: e.target.title.value, category: e.target.category.value, summary: e.target.summary.value, imageUrl: e.target.imageUrl.value, challenge: e.target.challenge.value, solution: e.target.solution.value, outcomes: e.target.outcomes.value.split(',').map(s=>s.trim()).filter(Boolean), technologies: e.target.technologies.value.split(',').map(s=>s.trim()).filter(Boolean), githubUrl: e.target.githubUrl.value };
                if (currentEditing) { await updateDoc(doc(db, 'case_studies', currentEditing.id), data); } else { await addDoc(collection(db, 'case_studies'), data); }
                currentEditing = null; render();
            });
            attachListListeners('case_studies');
        }

        // --- Helper for List Event Listeners ---
        function attachListListeners(collectionName) {
            if (currentEditing && document.getElementById('cancel-edit')) {
                document.getElementById('cancel-edit').addEventListener('click', () => { currentEditing = null; render(); });
            }
            document.getElementById('data-list').addEventListener('click', async (e) => {
                const editId = e.target.dataset.editId;
                const deleteId = e.target.dataset.deleteId;
                if (editId) {
                    currentEditing = (collectionName === 'testimonials' ? testimonials : caseStudies).find(item => item.id === editId);
                    render();
                }
                if (deleteId) {
                    if (confirm(`Are you sure you want to delete this ${collectionName.slice(0, -1)}?`)) {
                        await deleteDoc(doc(db, collectionName, deleteId));
                    }
                }
            });
        }

        // --- Initialize Data Listeners & Auth ---
        onAuthStateChanged(auth, user => render());
        onSnapshot(query(collection(db, 'case_studies'), orderBy('title')), s => { caseStudies = s.docs.map(d => ({id: d.id, ...d.data()})); if(auth.currentUser && activeTab === 'case_studies') render(); });
        onSnapshot(query(collection(db, 'testimonials'), orderBy('author')), s => { testimonials = s.docs.map(d => ({id: d.id, ...d.data()})); if(auth.currentUser && activeTab === 'testimonials') render(); });
    </script>
</body>
</html>
