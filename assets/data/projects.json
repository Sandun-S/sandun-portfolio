{
    "projects": [
        {
            "id": "agri-tech-iot",
            "title": "Agri-Tech IoT Soil Monitoring System",
            "category": "IoT",
            "summary": "An end-to-end IoT solution for real-time soil condition monitoring to optimize irrigation and fertilizer usage for a Sri Lankan startup.",
            "thumbnailUrl": "https://i.ibb.co/3cYfGDB/agritech-iot.jpg",
            "heroUrl": "https://i.ibb.co/3cYfGDB/agritech-iot.jpg",
            "overview": "Developed a complete IoT solution for a Sri Lankan Agri-Tech startup. The system uses custom-designed ESP32-based sensor nodes to collect real-time data on soil moisture, pH, and nutrient levels. Firmware was written in C++ using the ESP-IDF framework. Data is transmitted via LoRaWAN to a cloud backend on Firebase, with a React-based dashboard for farmers to view analytics and receive alerts, helping optimize irrigation and fertilizer usage.",
            "technologies": ["ESP32", "C++", "ESP-IDF", "LoRaWAN", "Firebase", "React", "KiCad"],
            "features": [
                "Real-time data collection from multiple wireless sensor nodes.",
                "Low-power design for extended battery life in the field.",
                "Long-range communication using LoRaWAN.",
                "Cloud-based data storage and processing.",
                "Web dashboard for data visualization and alerts."
            ],
            "challenges": "The primary challenge was ensuring reliable, low-power, long-range communication from remote agricultural fields. This was solved by selecting LoRaWAN over WiFi or cellular and meticulously optimizing the ESP32's deep sleep cycles in the firmware to conserve battery.",
            "githubUrl": "https://github.com/Sandun-S"
        },
        {
            "id": "wearable-pcb",
            "title": "Custom PCB for Wearable Health Tracker",
            "category": "PCB Design",
            "summary": "Designed a compact, 4-layer PCB for a wearable health monitoring device, focusing on power management and high-density component placement.",
            "thumbnailUrl": "https://i.ibb.co/3T4V21g/wearable-pcb.jpg",
            "heroUrl": "https://i.ibb.co/3T4V21g/wearable-pcb.jpg",
            "overview": "Designed a compact, 4-layer PCB using KiCad for a wearable health monitoring device. The board integrates a Nordic nRF52 series MCU for BLE communication, a MAX30102 heart rate and SpO2 sensor, and an MPU-6050 accelerometer. Key challenges included power management for extended battery life and high-density component placement in a small form factor. I managed the full prototyping process, from schematic design and layout to sourcing components and coordinating with local manufacturers for assembly.",
            "technologies": ["KiCad", "nRF52", "BLE", "Power Management", "High-Density PCB"],
            "features": [
                "4-layer board with controlled impedance for RF performance.",
                "Integration of MCU, sensors, and power management IC.",
                "Compact form factor suitable for a wearable device.",
                "Optimized for low power consumption."
            ],
            "challenges": "Fitting all components onto a small PCB while maintaining signal integrity for the BLE antenna was a major hurdle. This was achieved through careful component placement, a 4-layer stack-up with dedicated ground planes, and following RF layout best practices.",
            "githubUrl": null
        },
        {
            "id": "industrial-firmware",
            "title": "Firmware Refactoring for Industrial Controller",
            "category": "Firmware",
            "summary": "Refactored and optimized legacy C firmware for an STM32-based industrial control unit, improving reliability and performance by over 50%.",
            "thumbnailUrl": "https://i.ibb.co/51pDqM0/industrial-firmware.jpg",
            "heroUrl": "https://i.ibb.co/51pDqM0/industrial-firmware.jpg",
            "overview": "Refactored and optimized the C firmware for a legacy industrial control unit based on an STM32 microcontroller. The original code suffered from instability and timing issues. I implemented a real-time operating system (FreeRTOS) to manage tasks efficiently, resolved critical bugs through systematic debugging with a JTAG probe, and improved the system's overall reliability and performance by over 50%. This extended the product's lifecycle and saved the client significant hardware replacement costs.",
            "technologies": ["STM32", "C", "FreeRTOS", "JTAG/SWD Debugging", "CAN Bus"],
            "features": [
                "Implementation of a Real-Time Operating System (RTOS).",
                "Preemptive task scheduling for deterministic performance.",
                "Improved system stability and fault tolerance.",
                "Modular code structure for easier maintenance."
            ],
            "challenges": "Introducing an RTOS into a legacy monolithic codebase without breaking existing functionality was difficult. The solution involved a gradual, module-by-module migration of functionalities into separate tasks, extensive regression testing at each step, and careful management of shared resources using mutexes and semaphores.",
            "githubUrl": "https://github.com/Sandun-S"
        },
        {
            "id": "smart-hydroponics",
            "title": "Automated Hydroponics Controller",
            "category": "Automation",
            "summary": "A closed-loop control system for a hydroponics setup that automates nutrient dosing, pH balancing, and environmental control.",
            "thumbnailUrl": "https://i.ibb.co/zQ6Z6Wc/hydroponics.jpg",
            "heroUrl": "https://i.ibb.co/zQ6Z6Wc/hydroponics.jpg",
            "overview": "This project involved creating a smart controller for a small-scale hydroponics farm. Built around a Raspberry Pi and an STM32 co-processor, the system monitors water temperature, pH, and Electrical Conductivity (EC). It controls peristaltic pumps to automatically dose nutrients and pH adjusters, maintaining optimal growing conditions. The STM32 handles real-time sensor readings and pump control, while the Raspberry Pi runs a Python-based server for data logging and provides a web interface for remote monitoring.",
            "technologies": ["Raspberry Pi", "STM32", "Python", "C++", "Sensors", "Control Systems"],
            "features": [
                "Automatic pH and nutrient level management.",
                "Web-based dashboard for remote monitoring.",
                "Data logging for trend analysis.",
                "Fail-safe mechanisms to prevent over-dosing."
            ],
            "challenges": null,
            "githubUrl": "https://github.com/Sandun-S"
        },
        {
            "id": "vehicle-tracker",
            "title": "GPS/GSM Vehicle Tracking System",
            "category": "IoT",
            "summary": "A real-time vehicle tracking device with a web-based dashboard, designed for fleet management and asset tracking.",
            "thumbnailUrl": "https://i.ibb.co/qD8427f/gps-tracker.jpg",
            "heroUrl": "https://i.ibb.co/qD8427f/gps-tracker.jpg",
            "overview": "Developed a custom vehicle tracking unit using a SIM808 module (which combines GPS and GPRS) and an ATmega328P microcontroller. The firmware, written in C++, periodically reads GPS coordinates and transmits them to a cloud server via the GPRS network using the MQTT protocol. A simple web dashboard built with Node.js and Leaflet.js displays the vehicle's location in real-time on a map. The device also includes an accelerometer to detect motion and optimize power consumption.",
            "technologies": ["ATmega328P", "GPS/GPRS", "C++", "MQTT", "Node.js", "Leaflet.js"],
            "features": [
                "Real-time location tracking.",
                "Low power consumption with motion detection.",
                "Lightweight and reliable MQTT communication.",
                "Interactive map-based web dashboard."
            ],
            "challenges": null,
            "githubUrl": "https://github.com/Sandun-S"
        },
        {
            "id": "ble-beacon",
            "title": "Bluetooth Low Energy (BLE) Beacon System",
            "category": "IoT",
            "summary": "A system for indoor positioning and proximity marketing using nRF52-based BLE beacons and a companion mobile application.",
            "thumbnailUrl": "https://i.ibb.co/vLGJ4Vj/ble-beacon.jpg",
            "heroUrl": "https://i.ibb.co/vLGJ4Vj/ble-beacon.jpg",
            "overview": "This project focused on creating a network of custom BLE beacons using the Nordic nRF52832 SoC. The firmware was developed to broadcast advertisement packets in the iBeacon format. A proof-of-concept mobile app was created to scan for these beacons, estimate proximity based on RSSI (Received Signal Strength Indicator), and trigger context-aware notifications. This technology is ideal for applications like indoor navigation in malls or museums, or for proximity-based marketing in retail stores.",
            "technologies": ["nRF52", "BLE", "iBeacon", "C", "Mobile App (PoC)"],
            "features": [
                "Low-power BLE beacon broadcasting.",
                "Compatibility with standard iBeacon and Eddystone formats.",
                "Proximity detection using RSSI.",
                "Companion app for demonstrating functionality."
            ],
            "challenges": "Calibrating the RSSI values to accurately estimate distance in different environments was the main challenge, requiring extensive testing and the implementation of a filtering algorithm to smooth out signal fluctuations.",
            "githubUrl": null
        }
    ]
}
